<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Http2.0</title>
    <url>/my-blog/Http2-0.html</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>HTTP/2没有改动HTTP的应用语义，方法，状态码，URI和标头字段等概念与http一致</p>
<p>http/2修改了<strong>数据格式化(分帧)</strong>以及在<strong>客户端与服务器间传输的方式</strong>，通过新的分帧层向我们的应用隐藏了所有复杂性，因此所有现有的应用都可以不必修改</p>
<p>特点：让我们的应用更快，更简单，更稳定</p>
<p>目标：</p>
<ul>
<li>支持完整的请求和响应复用来减少延迟</li>
<li>压缩HTTP标头字段将协议成本降到最低</li>
<li>增加请求优先级</li>
<li>服务器推送</li>
</ul>
<p>手段：</p>
<ul>
<li>流的控制，错误处理，升级机制</li>
</ul>
<p>支持：</p>
<ul>
<li>数据格式化分帧</li>
<li>客户端和服务端传输方式</li>
<li>新的二进制分帧层</li>
</ul>
<h4 id="http1-x缺点"><a href="#http1-x缺点" class="headerlink" title="http1.x缺点"></a>http1.x缺点</h4><ul>
<li>需要多个连接才能实现并发和缩短延迟</li>
<li>不会压缩请求头和响应头，不必要的网络流量</li>
<li>http1.x 不支持有效的资源优先级，TCP利用率低下</li>
</ul>
<h4 id="http-2"><a href="#http-2" class="headerlink" title="http/2"></a>http/2</h4><ul>
<li><p>支持压缩头部字段和在同一连接上进行多个并发交换，对同一连接上的请求和响应消息进行交错</p>
<p>并且为http头部是由有效编码</p>
<ol>
<li>有效的利用网络资源，<strong>减少感知的延迟时间</strong></li>
<li>与其他流竞争减少，提高网络容量的利用率，减少TCP连接</li>
</ol>
</li>
<li><p>设置请求优先级，让更重要的请求更快速的完成</p>
</li>
</ul>
<h4 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h4><blockquote>
<p>所有的核心在于新的二进制分帧层 在HTTP层面，TLS之前</p>
<p>层位于 HTTP API与套接字接口(TSL)之间经过优化的新的编码机制</p>
</blockquote>
<h4 id="数据流，消息和帧"><a href="#数据流，消息和帧" class="headerlink" title="数据流，消息和帧"></a>数据流，消息和帧</h4><blockquote>
<p>客户端与服务器之间交换数据的方式</p>
<ol>
<li>数据流：已建立的连接内的双向数据流，承载一条或多条消息</li>
<li>消息：逻辑请求或响应消息对赢得一系列帧</li>
<li>帧：http/2 通信的最小单位，都包含帧头，标识出当前帧所属的数据流</li>
</ol>
</blockquote>
<ul>
<li>所有通信在一个TCP上连接完成，此连接可以承载任意数量的双向数据流</li>
<li>每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息</li>
<li>每条消息都是条逻辑的HTTP消息，包含一个或多个帧</li>
<li>帧是最小的通信单位，承载着特定类型的数据，如HTTP头部信息，消息负载。</li>
<li>来自不同的数据流的帧可以交错发送，然后根据每个帧头的标识符表示来重新组装</li>
</ul>
<p>简言之，HTTP/2 将 HTTP 协议通信分解为二进制编码帧的交换，这些帧对应着特定数据流中的消息。所有这些都在一个 TCP 连接内复用。 这是 HTTP/2 协议所有其他功能和性能优化的基础。</p>
<h4 id="请求与响应复用"><a href="#请求与响应复用" class="headerlink" title="请求与响应复用"></a>请求与响应复用</h4><p>在HTTP1.x中，详细发起多个并行请求提升性能，必须使用多个TCP连接，每个连接交互一个响应</p>
<p>这种模型会导致队首阻塞，造成TCP连接效率低下</p>
<p>HTTP/2 二进制分帧层，突破了这些限制，实现了完整的请求和响应的复用，客户端和服务器可以将HTTP消息分解成互不依赖的帧，交错发送，最后再另一端把他们重新组装起来</p>
<h4 id="数据流优先级"><a href="#数据流优先级" class="headerlink" title="数据流优先级"></a>数据流优先级</h4><p>每个数据流都有一个关联的权重和依赖关系</p>
<ol>
<li>可以为每个数据流分配一个介于1到256之间的整数</li>
<li>每个数据流和其他数据流之间可以存在显式的依赖关系</li>
</ol>
<p>数据流依赖关系和权重表示传输优先级，而不是要求，因此不能保证特定的处理或传输顺序。 即，客户端无法强制服务器通过数据流优先级以特定顺序处理数据流。 尽管这看起来违反直觉，但却是一种必要行为。 我们不希望在优先级较高的资源受到阻止时，还阻止服务器处理优先级较低的资源</p>
<h4 id="每个来源一个连接"><a href="#每个来源一个连接" class="headerlink" title="每个来源一个连接"></a>每个来源一个连接</h4><p>HTTP/2 不再依赖多个 TCP 连接去并行复用数据流；每个数据流都拆分成很多帧，而这些帧可以交错，还可以分别设定优先级。 因此，所有 HTTP/2 连接都是永久的，而且仅需要每个来源一个连接</p>
<h4 id="流控制"><a href="#流控制" class="headerlink" title="流控制"></a>流控制</h4><p>流控制是阻止发送方 向 接收方发送大量数据的机制，以免超出后者的需求或处理能力；</p>
<p>HTTP/2 提供了一组简单的构建块，这些构建块允许客户端和服务器实现自己数据流和连接级流控制</p>
<ul>
<li>流控制具有方向性： 每个接收方都可以根据自身需要选择为每个数据流和整个连接设置任意的窗口大小</li>
<li>流控制基于信用： 每个接收方都可以公布其初始连接和数据流流控制窗口（以字节为单位），每当发送方发出 <code>DATA</code> 帧时都会减小，在接收方发出 <code>WINDOW_UPDATE</code> 帧时增大。</li>
<li>流控制无法停用：</li>
<li>流控制为逐跃点控制，而非端到端的控制：</li>
</ul>
<h4 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h4><p>服务器可以对一个客户端请求发送多个响应；除了对最初请求的响应外，服务器还可以向客户端推送额外资源（图 12-5），而无需客户端明确地请求</p>
<p>所有服务器推送数据流都由 <code>PUSH_PROMISE</code> 帧发起，表明了服务器向客户端推送所述资源的意图</p>
<p>在客户端接收到 <code>PUSH_PROMISE</code> 帧后，它可以根据自身情况选择拒绝数据流（通过 <code>RST_STREAM</code> 帧）</p>
<h4 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h4><p>减少头部大小</p>
<ol>
<li><p>这种格式支持通过静态霍夫曼代码对传输的标头字段进行编码，从而减小了各个传输的大小。</p>
</li>
<li><p>这种格式要求客户端和服务器同时维护和更新一个包含之前见过的标头字段的索引列表，</p>
</li>
<li><p>（换句话说，它可以建立一个共享的压缩上下文），此列表随后会用作参考，对之前传输的值进行有效编码</p>
<p>出现了针对 TLS 和 SPDY 压缩算法的“犯罪”安全攻击，此攻击会导致会话被劫持。 于是，zlib 压缩算法被 HPACK 替代，后者经过专门设计，可以解决发现的安全问题、实现起来也更高效和简单，当然，可以对 HTTP 标头元数据进行良好压缩</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>滚动分页</title>
    <url>/my-blog/%E6%BB%9A%E5%8A%A8%E5%88%86%E9%A1%B5.html</url>
    <content><![CDATA[<h1 id="实现简单滚动分页效果"><a href="#实现简单滚动分页效果" class="headerlink" title="实现简单滚动分页效果"></a>实现简单滚动分页效果</h1><p><a href="https://tomoyd.github.io/hexo-blog/demos/%E5%B8%B8%E8%A7%81%E9%9C%80%E6%B1%82/%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8.html">示例地址</a></p>
<h4 id="主要场景"><a href="#主要场景" class="headerlink" title="主要场景"></a>主要场景</h4><p>展示大量的图片等内容，不需要用户点击，滑动加载的情况;</p>
<h4 id="实现要点"><a href="#实现要点" class="headerlink" title="实现要点"></a>实现要点</h4><p>throttle(节流)，scroll事件，pageYOffset或者scrollTop属性</p>
<h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttleHandler</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeouter=<span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!timeouter&amp;&amp;<span class="built_in">window</span>.pageYOffset&gt;<span class="number">100</span>)&#123;</span><br><span class="line">                timeouter=setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    clearTimeout(timeouter);</span><br><span class="line">                    timeouter=<span class="literal">null</span></span><br><span class="line">                &#125;,delay);</span><br><span class="line">                fn()</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>vueRouter剖析</title>
    <url>/my-blog/vueRouter%E5%89%96%E6%9E%90.html</url>
    <content><![CDATA[<h4 id="vueRouter使用"><a href="#vueRouter使用" class="headerlink" title="vueRouter使用"></a>vueRouter使用</h4><p>总体来看,要想使用vueRouter,需要三步:</p>
<ul>
<li>声明一个vueRouter的实例</li>
<li>将vueRouter实例挂载到我们的vue实例的router选项</li>
<li>在组件中使用视图标签router-view</li>
</ul>
<h4 id="路由基础"><a href="#路由基础" class="headerlink" title="路由基础"></a>路由基础</h4><ol>
<li><p>路由匹配规则:通配符和匹配动态匹配,以及直接写死</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path:&quot;/foo/123&quot;   只能匹配123</span><br><span class="line">path：&quot;/foo/:id&quot;  以id为参数接收第二个数，可以匹配/foo/123 /foo/uuu 等</span><br><span class="line">path：&quot;/foo/*&quot;    /foo/iii  /foo/8  /foo/hznag /foo/</span><br></pre></td></tr></table></figure>
</li>
<li><p>路由嵌套:</p>
<ol>
<li>父组件中使用视图</li>
<li>路由规则上，添加children字段，包含子组件，路由信息</li>
</ol>
</li>
<li><p>路由导航:</p>
<p>编程时导航路由实例调用push方法，this.$router.push()  </p>
<ul>
<li><p>参数可以是字符串如 “/foo”</p>
</li>
<li><p>对象：{path:”/foo”,params:{id:1}}  {name:”foo”,params:{id:1}}  </p>
<p>{name:”foo”,query:{key:1}}</p>
</li>
</ul>
</li>
<li><p>命名视图和命名路由:</p>
<ol>
<li><p>路由配置时可以给一个name属性以命名</p>
</li>
<li><p>视图也可以进行命名使用，以匹配相关的视图 如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-view name=&quot;test&quot;&gt;&lt;router-view&gt;</span><br><span class="line"></span><br><span class="line">在路由声明时，</span><br><span class="line">components:&#123;</span><br><span class="line">	defualt:DefautComponent,</span><br><span class="line">	test:TestComponent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<ol start="5">
<li><p>重定向和别名:</p>
<p>redirect：”/a”,也可以是个函数，参数为to</p>
<p>别名：为路由建立别名字，如path:”/a”,alias:”/b”</p>
</li>
<li><p>路由传参:</p>
<p>参数会以params存在路由信息对象上，为了解耦，可以在路由声明上声明</p>
<p>props为true，或者返回一个对象的函数，这个函数的参数为路由信息对象</p>
</li>
<li><p>模式:</p>
<p>命名为history是要注意增加一个能够覆盖所有的情况的候选资源，如果匹配不到任何静态资源，就返回一个index.html页面</p>
</li>
</ol>
<h4 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h4><p>离开或进入时会触发的路由守卫：</p>
<h5 id="全局的路由守卫："><a href="#全局的路由守卫：" class="headerlink" title="全局的路由守卫："></a>全局的路由守卫：</h5><p>路由实例的beforeEach 三个参数 to form next</p>
<p>next() 参数可以是空，false，路径，error</p>
<p>beforeResolve：路由确认之前，同时所有组件内守卫和异步路由组件之后 触发</p>
<p>后置：</p>
<p>afterEach()  to,from</p>
<h5 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h5><p>beforeEnter选项to form next</p>
<h5 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h5><p>beforeRouteEnter</p>
<p>beforeRouteUpdate</p>
<p>beforeRouteLeave</p>
<h4 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h4><p>路由配置的meta字段</p>
<p>可以在路由信息matched字段中查找</p>
<h4 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h4><p>可以在视图上加一些过渡效果</p>
<h4 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h4><p>可以选择在路由组件的钩子函数和路由钩子函数中获取API数据</p>
<h4 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h4><p>添加scrollBehavior：字段在由实例里面，返回一个对象 位置信息{x:0,y:0}或者{selector：to.hash}</p>
<h4 id="懒加载："><a href="#懒加载：" class="headerlink" title="懒加载："></a>懒加载：</h4><p>使用import动态引入组件 import(“a.vue”)</p>
<p>使用webpack打包到一个文件chunk中：import(/* webpackChunkName: “group-foo” */ ‘./Foo.vue’)</p>
]]></content>
  </entry>
  <entry>
    <title>webpack理解</title>
    <url>/my-blog/webpack%E7%90%86%E8%A7%A3.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>webpack是一种Javascript应用程序的静态模块打包器，这里需要注意两个内容，webpack是为我们的JavaScript应用服务的，服务的内容是为打包应用所需的静态模块，也就是我们在开发中的依赖以及一些编写css和js及资源图片文字等静态资源，通过这个工具可以将我们的需要的打包浏览器能够解析渲染的文件</p>
</blockquote>
<h6 id="为什么需要webpack？"><a href="#为什么需要webpack？" class="headerlink" title="为什么需要webpack？"></a>为什么需要webpack？</h6><p>可以为我们做很好的前后端分离，前端按照前端开发项目目录，模块化管理编写前端业务逻辑，后端也安装后端的习惯编写自己的逻辑；打包工具就可以将前端的代码经过一定的优化或者压缩，组织成需要的目录结构文件，提供给服务器使用；</p>
<h2 id="webpack理解"><a href="#webpack理解" class="headerlink" title="webpack理解"></a>webpack理解</h2><p>其实可以认为<code>webpack</code>主要服务两个方面：生产环境和开发者环境；也可以认为一个方面是结果，一个方面是过程</p>
<h6 id="从结果来说："><a href="#从结果来说：" class="headerlink" title="从结果来说："></a>从结果来说：</h6><blockquote>
<p>为生产环境输出一个经过精打细磨的前端文件夹：</p>
</blockquote>
<p>这是我们用webpack最终要达到的需求，也就是我们需要一个能够进行尽可能优化的结果，比如我们可能需要，压缩文件，缓存的问题，模块的重复引用的问题等等，一些没有用到的函数的处理等</p>
<h6 id="从过程来说："><a href="#从过程来说：" class="headerlink" title="从过程来说："></a>从过程来说：</h6><blockquote>
<p>在开发过程中，提高前端开发的效率</p>
</blockquote>
<p>这是我们webpack给我们提供的一种开发服务体验，让开发人员更好的去开发</p>
<h2 id="针对这两个方面的webpack需要的配置"><a href="#针对这两个方面的webpack需要的配置" class="headerlink" title="针对这两个方面的webpack需要的配置"></a>针对这两个方面的<code>webpack</code>需要的配置</h2><p>从开发的方面来说：</p>
<p><code>webpack</code>需要提供给我们一个开发服务器，相应的配置时<code>devServer</code>选项，而针对开发者服务器我们可以根据需求进行相关的配置，比如需要能够热更新等相关配置</p>
<p>从结果来说：</p>
<ol>
<li><p><code>webpack</code> 需要知道从哪里开始解析，也就是我们的入口文件input，也可指定多个入口文件</p>
</li>
<li><p><code>webpack</code>需要知道输出到哪里：output选项，以及输出的名称等</p>
</li>
<li><p><code>webpack</code>需要解析<code>css</code>，sass，以及图片的引入这些资源：<code>webpack</code>需要借助相应的模块</p>
<p>去配置 需要相应的loader去解析，这个需要配置</p>
</li>
<li><p>需要<code>webpack</code>做一些特殊的处理，最后输出的文件，输出的文件是否需要压缩，模块引用的去重，一些其他的优化，这时就需要我们引入相应的插件plugin 进行处理</p>
</li>
</ol>
<p>整个<code>webpack</code>可以说就是围绕着这几个内容去做相关配置的添加和修改的</p>
]]></content>
  </entry>
  <entry>
    <title>event_loop</title>
    <url>/my-blog/event-loop.html</url>
    <content><![CDATA[<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><blockquote>
<p>事件循环机制</p>
</blockquote>
<p><code>JavaScript</code>是单线程的，事件循环就是解决其运行阻塞的一种机制</p>
<p>宏任务：script，<code>setTimeout</code>，<code>setInternal</code>,<code>setImmediate</code>,I/O，<code>UI</code>事件</p>
<p>微任务：process，<code>nextTick</code>，Promise，<code>Object.observe</code>,<code>MutationObserver</code></p>
<p><strong>1. 主线程执行任务，会形成一个执行栈，从任务列表中读取任务是循环不断的，这个运行机制形成了事件循环，</strong></p>
<p><strong>2. 执行第一个宏任务，依次执行代码，遇到微任务推到微任务队列中，遇到宏任务放到宏任务队列中</strong></p>
<p><strong>3. 执行完第一个宏任务中的非宏任务和非微任务代码后，取出所有的微任务，执行完</strong></p>
<p><strong>4. 取出宏任务队列首个宏任务，按照步骤2,步骤3，步骤4循环执行，直到所有的执行完</strong></p>
<p><strong>注意：对于所有的同步任务来说，同步用会在主线程形成一个执行栈</strong></p>
<p><strong>对于异步任务，等待某个时机，触发线程，将回调函数加到队列中执行</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">t</span> =&gt;</span> <span class="built_in">console</span>.log(t));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>依次会输出：4，3，2，1</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>wheel_01</title>
    <url>/my-blog/wheel-01.html</url>
    <content><![CDATA[<h3 id="吸顶效果"><a href="#吸顶效果" class="headerlink" title="吸顶效果"></a><a href="https://tomoyd.github.io/wheels/top-style">吸顶效果</a></h3>]]></content>
      <tags>
        <tag>轮子</tag>
      </tags>
  </entry>
  <entry>
    <title>fullScene</title>
    <url>/my-blog/fullScene.html</url>
    <content><![CDATA[<h2 id="浏览器全屏"><a href="#浏览器全屏" class="headerlink" title="浏览器全屏"></a>浏览器全屏</h2><p>实现全屏功能，首先要考虑到的是浏览器兼容的问题，各个浏览器的全屏实现方法及标准的实现方法;其次要考虑到功能完整性，开启全屏和关闭全屏应是一致出现的,<a href="https://tomoyd.github.io/FrontedTechStack/demo/FullScreen/full-screen">预览地址</a></p>
<a id="more"></a>
<h2 id="全屏方法处理"><a href="#全屏方法处理" class="headerlink" title="全屏方法处理"></a>全屏方法处理</h2><p>调用dom元素的标准全屏方法requestFullScreen()，考虑到兼容各个浏览器故有以下代码 ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getMyRequestFullScreen=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> myEl = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">return</span> myEl.requestFullScreen||myEl.webkitRequestFullScreen</span><br><span class="line">    ||myEl.mozRequestFullScreen||myEl.msRequestFullScreen</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用得到通用的函数句柄</span></span><br><span class="line"><span class="keyword">let</span> openFullScreen=getMyRequestFullScreen()</span><br><span class="line"><span class="comment">// 为函数指定this的值，这里使用call（），这里假设targetElement为我们所要全屏的对象</span></span><br><span class="line">openFullScreen.call(targetElement)</span><br></pre></td></tr></table></figure>

<h2 id="退出全屏处理"><a href="#退出全屏处理" class="headerlink" title="退出全屏处理"></a>退出全屏处理</h2><p>退出全屏，需要调用document的标准方法exitFullscreen(),兼容各个浏览器故有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getExitFullScreen=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">document</span>.exitFullScreen||<span class="built_in">document</span>.mozCancelFullScreen||</span><br><span class="line">	<span class="built_in">document</span>.webkitCancelScreen||<span class="built_in">document</span>.msExitFullScreen</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> exitFullScreen=getExitFullScreen()</span><br><span class="line">exitFullScreen.call(targetElement)</span><br></pre></td></tr></table></figure>

<h2 id="判断是否处于全屏"><a href="#判断是否处于全屏" class="headerlink" title="判断是否处于全屏"></a>判断是否处于全屏</h2><p>标准属性fullscreenElement是否为null可以判断，考虑到各个浏览器兼容性故有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isFullScreen=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">document</span>.fullscreenElement&amp;&amp;<span class="built_in">document</span>.fullscreenElement!==<span class="literal">null</span>)||</span><br><span class="line">        <span class="built_in">document</span>.webkitIsFullScreen||<span class="built_in">document</span>.mozFullScreen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="综合上述"><a href="#综合上述" class="headerlink" title="综合上述"></a>综合上述</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handleFullScreen=<span class="function">(<span class="params">targetElement</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> openFullScreen=getMyRequestFullScreen()</span><br><span class="line">	<span class="keyword">let</span> shutFullScreen=getExitFullScreen()</span><br><span class="line">	<span class="keyword">let</span> isFull=isFullScreen()</span><br><span class="line">	<span class="keyword">if</span>(isFull)&#123;</span><br><span class="line">		shutFullScreen()</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        openFullScreen()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>a 标签</title>
    <url>/my-blog/aTag.html</url>
    <content><![CDATA[<h2 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h2><p>a 标签在实际开发过程中是会常用到，比如<strong>下载，跳转页面，导航</strong>等功能的实现</p>
<h2 id="实现下载"><a href="#实现下载" class="headerlink" title="实现下载"></a>实现下载</h2><p>有三种方式可以实现，<a href="https://tomoyd.github.io/hexo-blog/demos/aTag/download.html">示例地址</a></p>
<a id="more"></a>
<ul>
<li><p>直接使用<code>href</code>属性链接到资源地址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"资源地址"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>加入download属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"资源地址"</span> <span class="attr">download</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这两种方式其实可以看做是一种下载方式，不带download属性时，浏览器会执行默认行为，即浏览器能打开预览的则打开预览，否则直接下载</p>
<ul>
<li><p>JavaScript 实现下载</p>
<p>这种方式本质上也是创建一个可以链接资源的标签，然后进行手动点击，触发资源请求下载,本主题当然是使用a标签了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> aTag=<span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">         aTag.download=<span class="string">"text.txt"</span></span><br><span class="line">         aTag.style.display=<span class="string">'none'</span></span><br><span class="line">  </span><br><span class="line">         <span class="comment">//    创建a标签的href连接的地址</span></span><br><span class="line">         aTag.href=<span class="string">"资源地址"</span></span><br><span class="line">         <span class="comment">//    手动点击</span></span><br><span class="line">         aTag.click();</span><br><span class="line">         aTag=<span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一种需求就是<strong>导出</strong>功能，其实导出的话其原理是一致的，只是需要自己根据内容<strong>创建URL地址</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建内容的连接地址</span></span><br><span class="line"><span class="keyword">let</span> blobContent=<span class="keyword">new</span> Blob([content]) <span class="comment">// content 为我们要导出的内容</span></span><br><span class="line"><span class="keyword">let</span> urlContent = URL.createObjectURL(blobContent)</span><br><span class="line"><span class="comment">//urlContent赋给href属性即可</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h2><pre><code>    跳转需要考虑的一个问题是：跳转页面在什么地方展示，比如在整个窗口，在本页面的某个位置或者在新标签页展示
需要用的一个属性就是target属性，它的属性值决定了在哪里打开链接文档
其属性值可以为 _self(默认),_top(整个浏览器窗口打开)，_parent(在父级框架打开)，_blank(在新空白页打开)
也可以是iframename
可以认为_self,_parent,_blank,_top都是iframe的属性name的值，只不过这些值是HTML已经定义好的</code></pre><p><a href="https://tomoyd.github.io/hexo-blog/demos/aTag/nav.html">预览地址</a></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>a 标签</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搭建个人博客</title>
    <url>/my-blog/index.html</url>
    <content><![CDATA[<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>npm install -g hexo</p>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>命令行输入 <code>hexo init blogname</code></p>
<h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>下载next主题</p>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">官网文档配置链接</a></p>
]]></content>
      <categories>
        <category>个人向</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
